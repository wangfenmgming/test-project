<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!--spring配置 扫描当前目录下的注解 -->
	<context:component-scan base-package="yycg.**.**">
		<!-- 扫描的注解不包含指定的注解 -->
		<context:exclude-filter type="annotation" 
		expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- 配置 数据连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	<!-- 
		2. mybatis的SqlSession的工厂: SqlSessionFactoryBean 
			configLocation : 引用 myBatis 资源
			dataSource:引用数据源 
			typeAliasesPackage :指定实体类所在的包,然后自动将实体的简单类名映射为别名
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="typeAliasesPackage" value="yycg.**.pojo.po.**"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:yycg/**/dao/mapper/*.xml"></property>
	</bean>
	<!-- 
		3. mybatis自动扫描加载sql映射文件 : MapperScannerConfigurer 
			basePackage:指定sql映射文件/接口所在的包,进行自动扫描
	-->
	<bean id="config" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="yycg.**.dao"/>
	</bean>
	
	<!-- 4. 事务管理 : DataSourceTransactionManager 
		dataSource :引用上面的数据源
	-->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 4.1.配置事物属性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 根据方法名指定事务的属性 -->
			<tx:method name="query*"  read-only="true" isolation="READ_COMMITTED" />
			<tx:method name="find*"  read-only="true" isolation="READ_COMMITTED" />
			<tx:method name="get*"  read-only="true" isolation="READ_COMMITTED" />
            <tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED" />
            <tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED" />
            <tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED" />
            <tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" />
            <!-- Action中execute，暂时先用REQUIRED,以后真对查询操作，    修改以后在使用NOT_SUPPORTED -->
            <tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 4.2. 配置事务切入点, 以及把事务切入点和事务属性关联起来 -->
	<aop:config>
		<aop:pointcut id="txPoint" expression="execution(* yycg.*.service.impl.*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>	
	</aop:config>

</beans>
